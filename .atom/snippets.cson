# Rails
'.source.ruby, .source.ruby.rails':
  'find':
    'prefix': 'find'
    'body': """
            find(${1:params[:id]})
            """
  'after_action':
    'prefix': 'after_action'
    'body': """
            after_action :${1:method}${2:, only: [:${3:index}]
            """
  'before_action':
    'prefix': 'before_action'
    'body': """
            before_action :${1:method}${2:, only: [:${3:index}]
            """
  'redirect_to':
    'prefix': 'redirect_to'
    'body': """
            redirect_to ${1:path}
            """
# routes
'.source.ruby, .source.ruby.rails, .meta.rails.routes':
  'resource':
    'prefix': 'resource'
    'body': """
            resource :$0
            """
  'resources':
    'prefix': 'resources'
    'body': """
            resources :$0
            """
  'only':
    'prefix': 'only'
    'body': """
            only: [:${1:action}]
            """
# Controller
'.source.ruby, .source.ruby.rails, .meta.rails.controller':
  'params':
    'prefix': 'params'
    'body': """
            params[:${1:id}]$0
            """
  'respond_to':
    'prefix': 'respond_to'
    'body': """
            respond_to :$0
            """
# Model
'.source.ruby, .source.ruby.rails, .meta.rails.model':
  'belongs_to':
    'prefix': 'belongs_to '
    'body': """
            belongs_to :${0:category}
            """
  'has_many':
    'prefix': 'has_many'
    'body': """
            has_many :${0:cetegories}
            """
  'has_one':
    'prefix': 'has_one'
    'body': """
            has_one :${0:category}
            """
  'validates':
    'prefix': 'validates'
    'body': """
            validates :${1:field}
            """
  'prensencce':
    'prefix': 'presence'
    'body': """
            presence: ${0:true}
            """
# View


# Ruby
'.source.ruby':
  'Array.new':
    'prefix': 'Array'
    'body': """
            Array.new(${1:len,val})\n$0
            """
  'attr_accessor':
    'prefix': 'attr_accessor'
    'body': """
            attr_accessor :${0:attr}
            """
  'attr_reader':
    'prefix': 'attr_reader'
    'body': """
            attr_reader :${0:attr}
            """
  'attr_writer':
    'prefix': 'attr_writer'
    'body': """
            attr_writer :${0:attr}
            """
  'case':
    'prefix': 'case'
    'body': """
            case ${1:object}
            when $0
            """
  'class':
    'prefix': 'class'
    'body': """
            class ${1:Class}
              $0
            end
            """
  'def':
    'prefix': 'def'
    'body': """
            def ${1:method}
              $0
            end
            """
  'delete_if':
    'prefix': 'delete_if'
    'body': """
            delete_if { |${1:e}| $0 }
            """
  'do':
    'prefix': 'do'
    'body': """
            do${1: |${2:e}|}
              $0
            end
            """
  'each':
    'prefix': 'each'
    'body': """
            each { |${1:e}| $0 }
            """
  'each_char':
    'prefix': 'each_char'
    'body': """
            each_char { |${1:chr}| $0 }
            """
  'each_index':
    'prefix': 'each_index'
    'body': """
            each_index { |${1:i}| $0 }
            """
  'each_key':
    'prefix': 'each_key'
    'body': """
            each_key { |${1:i}| $0 }
            """
  'each_pair':
    'prefix': 'each_pair'
    'body': """
            each_pair { |${1:name}, ${2:val}| $0 }
            """
  'each_value':
    'prefix': 'each_value'
    'body': """
            each_value { |${1:val}| $0 }
            """
  'else':
    'prefix': 'else'
    'body': """
            else
              $0
            """
  'elsif':
    'prefix': 'elsif'
    'body': """
            elsif ${1:condition}
              $0
            """
  'Hash.new':
    'prefix': 'Hash'
    'body': """
            Hash.new { |${1:hash}, ${2:key}| ${1:hash}[${2:key}] = $0 }
            """
  'inject':
    'prefix': 'inject'
    'body': """
            inject${1:(${2:init})} {|${3:result}, ${2:item}| $0 }
            """
  'initialize':
    'prefix': 'initialize'
    'body': """
            initialize${1:(${2:arg})}$0
            """
  'map':
    'prefix': 'map'
    'body': """
            map { |${1:e}| $0 }
            """
  'require':
    'prefix': 'prefix'
    'body': """
            require $0
            """
  'reject':
    'prefix': 'reject'
    'body': """
            reject { |${1:e}| $0}
            """
  'scan':
    'prefix': 'scan'
    'body': """
            scan(/${1:pattern}/) { |${2:match}| $0 }
            """
  'sort':
    'prefix': 'sort'
    'body': """
            sort { |${1:a, b}| $0 }
            """
  'sort_by':
    'prefix': 'sort_by'
    'body': """
            sort_by { |${1:e}| $0 }
            """
  'when':
    'prefix': 'when'
    'body': """
            when $1
            $2
            """
  'while':
    'prefix': 'while'
    'body': """
            while ${1:condition}
              $0
            end
            """

# JavaScript
'.source.js':
  'add':
    'prefix': 'add'
    'body': 'add(${1:class})'
  'addEventListener':
    'prefix': 'addEventListener'
    'body': """
            addEventListener("${1:event}", function() {
              ${2:// body}
            });
            $3
            """
  'appendChild':
    'prefix': 'appendChild'
    'body': 'appendChild(${1:element});'
  'alert':
    'prefix': 'alert'
    'body': 'alert(${1:message});'
  'children':
    'prefix': 'children'
    'body': 'children'
  'classList':
    'prefix': 'classList'
    'body': 'classList'
  'document':
    'prefix': 'document'
    'body': 'document'
  'DOMContentLoaded':
    'prefix': 'DOMContentLoaded'
    'body': 'DOMContentLoaded'
  'for':
    'prefix': 'for'
    'body': """
            for (var i = ${1:0}; ${2:i < $3}; i++) {
              ${0:// body}
            }
            """
  'forEach':
    'prefix': 'forEach'
    'body': """
            forEach( function(${1:element}) {
              ${2:// body}
            });
            """
  'for in':
    'prefix': 'for in'
    'body': """
            for (${1:prop} in ${2:obj}) {
              ${0:// body}
            }
            """
  'function':
    'prefix': 'function'
    'body': """
            function${1: ${2:methodName}}($3) {
              $0
            }
            """
  'immediate function':
    'prefix': 'immediateFunction'
    'body': """
            (function() {
              ${0:// body}
            })();
            """
  'innerHTML':
    'prefix': 'innerHTML'
    'body': 'innerHTML = "${1:element}"'
  'parentNode':
    'prefix': 'parentNode'
    'body': 'parentNode'
  'parents\' children':
    'prefix': 'parentsChildren'
    'body': 'parentNode.children'
  'prompt':
    'prefix': 'prompt'
    'body': 'prompt(${1:message});'
  'prototype':
    'prefix': 'prototype'
    'body': 'prototype'
  'querySelector':
    'prefix': 'querySelector'
    'body': 'querySelector("$1")$2'
  'querySelectorAll':
    'prefix': 'querySelectorAll'
    'body': 'querySelectorAll("$1")$2'
  'remove':
    'prefix': 'remove'
    'body': 'remove(${1:class})'
  'removeChild':
    'prefix': 'removeChild'
    'body': 'removeChild(${1:element})'
  'setInterval':
    'prefix': 'setInterval'
    'body': """
            setInterval(function() {
              ${1:// body}
            }, ${2:delay});
            $3
            """
  'require':
    'prefix': 'require'
    'body': 'require("${1:module}");'
  'setTimeout':
    'prefix': 'setTimeout'
    'body': """
            setTimeout(function() {
              ${1:// body}
            }, ${2:delay});
            $3
            """
  'strict mode':
    'prefix': 'use'
    'body': """
            "use strict";

            $0
            """
  'textContent':
    'prefix': 'textContent'
    'body': 'textContent = "${1:content}";'
  'toggle':
    'prefix': 'toggle'
    'body': 'toggle(${1:class})'
  'variable':
    'prefix': 'var'
    'body': """
            var $1 = $2;
            $3
            """

# CSS
'.source.css':
  'comment':
    'prefix': 'comment'
    'body': '/* $1 */$2'
  'divider':
    'prefix': 'divider'
    'body': """
            /*========================================
              $1
            ========================================*/
            """
  'pc tablet media query':
    'prefix': 'media-pc-tablet'
    'body': """
            @media only screen and (min-width: 769px) {
              $1
            }
            """
  'pc media query':
    'prefix': 'media-pc'
    'body': """
            @media only screen and (min-width: 961px) {
              $1
            }
            """

# CoffeeScritp
'.source.coffee':
  # cson
  'tools':
    'prefix': 'tools'
    'body': """
            type: "${1:button}"
            icon: "$2"
            ${3:iconset: "${4:ion}"}
            callback: "$5"
            """
  'do':
    'prefix': 'do'
    'body': """
            do${1:(${2:args})}->$3
            """
  'class':
    'prefix': 'class'
    'body': """
            class ${1:ClassName}
            """
  'constructor':
    'prefix': 'const'
    'body': """
            constructor: (${1:args})->$2
            """
  'else':
    'prefix': 'else'
    'body': """
            else
              $1
            """
  'else if':
    'prefix': 'elseif'
    'body': """
            else if ${1:condition}$2
            """
  'extends':
    'prefix': 'extends'
    'body': """
            extends ${1:Ancestor}
            """
  'for in':
    'prefix': 'for in'
    'body': """
            for ${1:name} in ${2:array}$3
            """
  'for in (range)':
    'prefix': 'for in (range)'
    'body': """
            for ${1:name} in [${2:start}..${3:finish}]${4: by ${5:step}}$6
            """
  'for of':
    'prefix': 'for of'
    'body': """
            for ${1:key}, ${2:value} of ${3:Object}$4
            """
  'function':
    'prefix': 'function'
    'body': """
            ${1:(${2:args})}->$3
            """
  'function(bound)':
    'prefix': 'function(bound)'
    'body': """
            (${1:args}) =>$2
            """
  'if':
    'prefix': 'if'
    'body': """
            if ${1:condition}$2
            """
  'if then else':
    'prefix': 'if then else'
    'body': """
            if ${1:condition} then ${2:value} else ${3:other}$4
            """
  'log':
    'prefix': 'log'
    'body': """
            console.log$1
            """
  'switch':
    'prefix': 'switch'
    'body': """
            switch ${1:object}
              when ${2:value}$3
            """
  'when':
    'prefix': 'when'
    'body': """
            when ${1:condition}$2
            """
  'then':
    'prefix': 'then'
    'body': """
            then ${1:action}$2
            """

# HTML
'.text.html':
  'comment':
    'prefix': 'comment'
    'body': '<!-- $1 -->$2'
  'css link':
    'prefix': 'link'
    'body': '<link rel="stylesheet" href="${1:style}.css">'
  'html5 template':
    'prefix': 'html'
    'body': """
            <!DOCTYPE html>
            <html>
              <head>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width">
                <link rel="stylesheet" href="${1:css/style}.css">
                <title>${2:title}</title>
              </head>
              <body>
                $3
                <script src="js/main.js"></script>
              </body>
            </html>
            """
  'js':
    'prefix': 'script'
    'body': '<script src="${1:js/}"></script>$2'
  'option':
    'prefix': 'option'
    'body': '<option value="$1">$2</option>$3'

# markdown
'.source.gfm':
  'code':
    'prefix': 'code'
    'body': """
            ```$1
            ```
            """
  'coffee':
    'prefix': 'coffee'
    'body': """
            ```coffee$1
            ```
            """
  'css':
    'prefix': 'css'
    'body': """
            ```css$1
            ```
            """
  'html':
    'prefix': 'html'
    'body': """
            ```html$1
            ```
            """
  'javascript':
    'prefix': 'js'
    'body': """
            ```js$1
            ```
            """
  'ruby':
    'prefix': 'ruby'
    'body': """
            ```ruby$1
            ```
            """
  'sass':
    'prefix': 'sass'
    'body': """
            ```sass$1
            ```
            """
